"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cognitoInitSignup = cognitoInitSignup;
exports.cognitoConfirmSignup = cognitoConfirmSignup;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const helpers_1 = require("./helpers");
async function cognitoInitSignup(user, pass, config) {
    const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: config.awsRegion,
    });
    const createUserCommand = new client_cognito_identity_provider_1.SignUpCommand({
        ClientId: config.userPoolClientId,
        Username: user,
        Password: pass,
    });
    const { Session } = await cognito.send(createUserCommand);
    return Session;
}
async function cognitoConfirmSignup(user, code, session, config) {
    const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: config.awsRegion,
    });
    const validateEmailCommand = new client_cognito_identity_provider_1.ConfirmSignUpCommand({
        ClientId: config.userPoolClientId,
        Username: user,
        ConfirmationCode: code,
        Session: session,
    });
    const { Session } = await cognito.send(validateEmailCommand);
    const initiateAuthCommand = new client_cognito_identity_provider_1.InitiateAuthCommand({
        AuthFlow: client_cognito_identity_provider_1.AuthFlowType.USER_AUTH,
        ClientId: config.userPoolClientId,
        Session,
        AuthParameters: {
            USERNAME: user,
        },
    });
    const initAuthResponse = await cognito.send(initiateAuthCommand);
    return (0, helpers_1.getAuthDataFromAuthInitResponse)(initAuthResponse);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by1zaWduLXVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FjdGlvbnMvY29nbml0by1zaWduLXVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBVUEsOENBaUJDO0FBRUQsb0RBOEJDO0FBM0RELGdHQU1tRDtBQUNuRCx1Q0FBNEQ7QUFHckQsS0FBSyxVQUFVLGlCQUFpQixDQUNyQyxJQUFZLEVBQ1osSUFBWSxFQUNaLE1BQWM7SUFFZCxNQUFNLE9BQU8sR0FBRyxJQUFJLGdFQUE2QixDQUFDO1FBQ2hELE1BQU0sRUFBRSxNQUFNLENBQUMsU0FBUztLQUN6QixDQUFDLENBQUM7SUFFSCxNQUFNLGlCQUFpQixHQUFHLElBQUksZ0RBQWEsQ0FBQztRQUMxQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQjtRQUNqQyxRQUFRLEVBQUUsSUFBSTtRQUNkLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzFELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFTSxLQUFLLFVBQVUsb0JBQW9CLENBQ3hDLElBQVksRUFDWixJQUFZLEVBQ1osT0FBZSxFQUNmLE1BQWM7SUFFZCxNQUFNLE9BQU8sR0FBRyxJQUFJLGdFQUE2QixDQUFDO1FBQ2hELE1BQU0sRUFBRSxNQUFNLENBQUMsU0FBUztLQUN6QixDQUFDLENBQUM7SUFFSCxNQUFNLG9CQUFvQixHQUFHLElBQUksdURBQW9CLENBQUM7UUFDcEQsUUFBUSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0I7UUFDakMsUUFBUSxFQUFFLElBQUk7UUFDZCxnQkFBZ0IsRUFBRSxJQUFJO1FBQ3RCLE9BQU8sRUFBRSxPQUFPO0tBQ2pCLENBQUMsQ0FBQztJQUVILE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUU3RCxNQUFNLG1CQUFtQixHQUFHLElBQUksc0RBQW1CLENBQUM7UUFDbEQsUUFBUSxFQUFFLCtDQUFZLENBQUMsU0FBUztRQUNoQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQjtRQUNqQyxPQUFPO1FBQ1AsY0FBYyxFQUFFO1lBQ2QsUUFBUSxFQUFFLElBQUk7U0FDZjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakUsT0FBTyxJQUFBLHlDQUErQixFQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDM0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvZ25pdG9JZGVudGl0eVByb3ZpZGVyQ2xpZW50LFxuICBTaWduVXBDb21tYW5kLFxuICBDb25maXJtU2lnblVwQ29tbWFuZCxcbiAgSW5pdGlhdGVBdXRoQ29tbWFuZCxcbiAgQXV0aEZsb3dUeXBlLFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldEF1dGhEYXRhRnJvbUF1dGhJbml0UmVzcG9uc2UgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBBdXRoRGF0YSwgQ29uZmlnIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb2duaXRvSW5pdFNpZ251cChcbiAgdXNlcjogc3RyaW5nLFxuICBwYXNzOiBzdHJpbmcsXG4gIGNvbmZpZzogQ29uZmlnLFxuKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3QgY29nbml0byA9IG5ldyBDb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCh7XG4gICAgcmVnaW9uOiBjb25maWcuYXdzUmVnaW9uLFxuICB9KTtcblxuICBjb25zdCBjcmVhdGVVc2VyQ29tbWFuZCA9IG5ldyBTaWduVXBDb21tYW5kKHtcbiAgICBDbGllbnRJZDogY29uZmlnLnVzZXJQb29sQ2xpZW50SWQsXG4gICAgVXNlcm5hbWU6IHVzZXIsXG4gICAgUGFzc3dvcmQ6IHBhc3MsXG4gIH0pO1xuXG4gIGNvbnN0IHsgU2Vzc2lvbiB9ID0gYXdhaXQgY29nbml0by5zZW5kKGNyZWF0ZVVzZXJDb21tYW5kKTtcbiAgcmV0dXJuIFNlc3Npb247XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb2duaXRvQ29uZmlybVNpZ251cChcbiAgdXNlcjogc3RyaW5nLFxuICBjb2RlOiBzdHJpbmcsXG4gIHNlc3Npb246IHN0cmluZyxcbiAgY29uZmlnOiBDb25maWcsXG4pOiBQcm9taXNlPEF1dGhEYXRhPiB7XG4gIGNvbnN0IGNvZ25pdG8gPSBuZXcgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQoe1xuICAgIHJlZ2lvbjogY29uZmlnLmF3c1JlZ2lvbixcbiAgfSk7XG5cbiAgY29uc3QgdmFsaWRhdGVFbWFpbENvbW1hbmQgPSBuZXcgQ29uZmlybVNpZ25VcENvbW1hbmQoe1xuICAgIENsaWVudElkOiBjb25maWcudXNlclBvb2xDbGllbnRJZCxcbiAgICBVc2VybmFtZTogdXNlcixcbiAgICBDb25maXJtYXRpb25Db2RlOiBjb2RlLFxuICAgIFNlc3Npb246IHNlc3Npb24sXG4gIH0pO1xuXG4gIGNvbnN0IHsgU2Vzc2lvbiB9ID0gYXdhaXQgY29nbml0by5zZW5kKHZhbGlkYXRlRW1haWxDb21tYW5kKTtcblxuICBjb25zdCBpbml0aWF0ZUF1dGhDb21tYW5kID0gbmV3IEluaXRpYXRlQXV0aENvbW1hbmQoe1xuICAgIEF1dGhGbG93OiBBdXRoRmxvd1R5cGUuVVNFUl9BVVRILFxuICAgIENsaWVudElkOiBjb25maWcudXNlclBvb2xDbGllbnRJZCxcbiAgICBTZXNzaW9uLFxuICAgIEF1dGhQYXJhbWV0ZXJzOiB7XG4gICAgICBVU0VSTkFNRTogdXNlcixcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBpbml0QXV0aFJlc3BvbnNlID0gYXdhaXQgY29nbml0by5zZW5kKGluaXRpYXRlQXV0aENvbW1hbmQpO1xuICByZXR1cm4gZ2V0QXV0aERhdGFGcm9tQXV0aEluaXRSZXNwb25zZShpbml0QXV0aFJlc3BvbnNlKTtcbn1cbiJdfQ==