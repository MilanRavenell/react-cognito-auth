"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cognitoInitForgotPassword = cognitoInitForgotPassword;
exports.cognitoConfirmForgotPassword = cognitoConfirmForgotPassword;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const types_1 = require("../types");
async function cognitoInitForgotPassword(username, config) {
    const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: config.awsRegion,
    });
    try {
        const forgotPasswordCommand = new client_cognito_identity_provider_1.ForgotPasswordCommand({
            ClientId: config.userPoolClientId,
            Username: username,
        });
        await cognito.send(forgotPasswordCommand);
    }
    catch (error) {
        const authError = new types_1.CognitoAuthError();
        authError.name = "ForgotPasswordError";
        authError.message = error instanceof Error ? error.message : "Failed to initiate password reset";
        throw authError;
    }
}
async function cognitoConfirmForgotPassword(username, newPassword, confirmationCode, config) {
    const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: config.awsRegion,
    });
    try {
        const confirmForgotPasswordCommand = new client_cognito_identity_provider_1.ConfirmForgotPasswordCommand({
            ClientId: config.userPoolClientId,
            Username: username,
            Password: newPassword,
            ConfirmationCode: confirmationCode,
        });
        console.log("confirmForgotPasswordCommand", confirmForgotPasswordCommand);
        await cognito.send(confirmForgotPasswordCommand);
    }
    catch (error) {
        console.log("error", error);
        const authError = new types_1.CognitoAuthError();
        authError.name = "ConfirmForgotPasswordError";
        authError.message = error instanceof Error ? error.message : "Failed to confirm password reset";
        throw authError;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by1mb3Jnb3QtcGFzc3dvcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWN0aW9ucy9jb2duaXRvLWZvcmdvdC1wYXNzd29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BLDhEQXFCQztBQUVELG9FQTJCQztBQXpERCxnR0FJbUQ7QUFDbkQsb0NBQW9EO0FBRTdDLEtBQUssVUFBVSx5QkFBeUIsQ0FDN0MsUUFBZ0IsRUFDaEIsTUFBYztJQUVkLE1BQU0sT0FBTyxHQUFHLElBQUksZ0VBQTZCLENBQUM7UUFDaEQsTUFBTSxFQUFFLE1BQU0sQ0FBQyxTQUFTO0tBQ3pCLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQztRQUNILE1BQU0scUJBQXFCLEdBQUcsSUFBSSx3REFBcUIsQ0FBQztZQUN0RCxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQjtZQUNqQyxRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQWdCLEVBQUUsQ0FBQztRQUN6QyxTQUFTLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUM7UUFDakcsTUFBTSxTQUFTLENBQUM7SUFDbEIsQ0FBQztBQUNILENBQUM7QUFFTSxLQUFLLFVBQVUsNEJBQTRCLENBQ2hELFFBQWdCLEVBQ2hCLFdBQW1CLEVBQ25CLGdCQUF3QixFQUN4QixNQUFjO0lBRWQsTUFBTSxPQUFPLEdBQUcsSUFBSSxnRUFBNkIsQ0FBQztRQUNoRCxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBQVM7S0FDekIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDO1FBQ0gsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLCtEQUE0QixDQUFDO1lBQ3BFLFFBQVEsRUFBRSxNQUFNLENBQUMsZ0JBQWdCO1lBQ2pDLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLGdCQUFnQixFQUFFLGdCQUFnQjtTQUNuQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFDMUUsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1QixNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFnQixFQUFFLENBQUM7UUFDekMsU0FBUyxDQUFDLElBQUksR0FBRyw0QkFBNEIsQ0FBQztRQUM5QyxTQUFTLENBQUMsT0FBTyxHQUFHLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDO1FBQ2hHLE1BQU0sU0FBUyxDQUFDO0lBQ2xCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQsXG4gIEZvcmdvdFBhc3N3b3JkQ29tbWFuZCxcbiAgQ29uZmlybUZvcmdvdFBhc3N3b3JkQ29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb2duaXRvLWlkZW50aXR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBDb25maWcsIENvZ25pdG9BdXRoRXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvZ25pdG9Jbml0Rm9yZ290UGFzc3dvcmQoXG4gIHVzZXJuYW1lOiBzdHJpbmcsXG4gIGNvbmZpZzogQ29uZmlnXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgY29nbml0byA9IG5ldyBDb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCh7XG4gICAgcmVnaW9uOiBjb25maWcuYXdzUmVnaW9uLFxuICB9KTtcblxuICB0cnkge1xuICAgIGNvbnN0IGZvcmdvdFBhc3N3b3JkQ29tbWFuZCA9IG5ldyBGb3Jnb3RQYXNzd29yZENvbW1hbmQoe1xuICAgICAgQ2xpZW50SWQ6IGNvbmZpZy51c2VyUG9vbENsaWVudElkLFxuICAgICAgVXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgY29nbml0by5zZW5kKGZvcmdvdFBhc3N3b3JkQ29tbWFuZCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgYXV0aEVycm9yID0gbmV3IENvZ25pdG9BdXRoRXJyb3IoKTtcbiAgICBhdXRoRXJyb3IubmFtZSA9IFwiRm9yZ290UGFzc3dvcmRFcnJvclwiO1xuICAgIGF1dGhFcnJvci5tZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIkZhaWxlZCB0byBpbml0aWF0ZSBwYXNzd29yZCByZXNldFwiO1xuICAgIHRocm93IGF1dGhFcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29nbml0b0NvbmZpcm1Gb3Jnb3RQYXNzd29yZChcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgbmV3UGFzc3dvcmQ6IHN0cmluZyxcbiAgY29uZmlybWF0aW9uQ29kZTogc3RyaW5nLFxuICBjb25maWc6IENvbmZpZ1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGNvZ25pdG8gPSBuZXcgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQoe1xuICAgIHJlZ2lvbjogY29uZmlnLmF3c1JlZ2lvbixcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb25maXJtRm9yZ290UGFzc3dvcmRDb21tYW5kID0gbmV3IENvbmZpcm1Gb3Jnb3RQYXNzd29yZENvbW1hbmQoe1xuICAgICAgQ2xpZW50SWQ6IGNvbmZpZy51c2VyUG9vbENsaWVudElkLFxuICAgICAgVXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgUGFzc3dvcmQ6IG5ld1Bhc3N3b3JkLFxuICAgICAgQ29uZmlybWF0aW9uQ29kZTogY29uZmlybWF0aW9uQ29kZSxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKFwiY29uZmlybUZvcmdvdFBhc3N3b3JkQ29tbWFuZFwiLCBjb25maXJtRm9yZ290UGFzc3dvcmRDb21tYW5kKTtcbiAgICBhd2FpdCBjb2duaXRvLnNlbmQoY29uZmlybUZvcmdvdFBhc3N3b3JkQ29tbWFuZCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coXCJlcnJvclwiLCBlcnJvcik7XG4gICAgY29uc3QgYXV0aEVycm9yID0gbmV3IENvZ25pdG9BdXRoRXJyb3IoKTtcbiAgICBhdXRoRXJyb3IubmFtZSA9IFwiQ29uZmlybUZvcmdvdFBhc3N3b3JkRXJyb3JcIjtcbiAgICBhdXRoRXJyb3IubWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJGYWlsZWQgdG8gY29uZmlybSBwYXNzd29yZCByZXNldFwiO1xuICAgIHRocm93IGF1dGhFcnJvcjtcbiAgfVxufSAiXX0=